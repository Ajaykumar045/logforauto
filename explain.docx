# Viva Questions and Answers for the Automobile Catalogue Project

## 1. What is the purpose of this project?
   - The purpose of this project is to create an online catalogue for automobiles, including cars and bikes. Users can browse through different vehicles, view details, and add items to their cart for purchase.

## 2. What technologies are used in this project?
   - The project uses HTML, CSS, and JavaScript for the frontend.
   - Node.js and Express are used for the backend server.
   - SQLite is used as the database to store product information.

## 3. Can you explain the file structure of the project?
   - `public/`: Contains all the frontend files.
     - `automobile.html`: The main page of the website.
     - `cart.html`: The shopping cart page.
     - `details.html`: The product details page.
     - `main.js`: JavaScript file for handling frontend functionality.
     - `style.css`: CSS file for styling the website.
   - `requirements.txt`: Lists the dependencies required for the project.
   - `PROCEDURE.md`: Provides setup instructions and explanations for the project.
   - `README.md`: Contains project overview, creator details, and references.

## 4. How does the "Buy Now" button functionality work?
   - When a user clicks the "Buy Now" button, the product details (name, price, image) are stored in `localStorage`.
   - The user is then redirected to the `cart.html` page.
   - On the `cart.html` page, the stored product details are retrieved from `localStorage` and displayed in the cart.

## 5. How is the shopping cart implemented?
   - The shopping cart is implemented using `localStorage` to store product details.
   - The `main.js` script handles adding items to the cart and displaying them on the `cart.html` page.
   - Users can adjust quantities and remove items from the cart.

## 6. What is the role of `main.js` in this project?
   - `main.js` handles the frontend functionality, including:
     - Adding items to the cart when the "Buy Now" button is clicked.
     - Displaying cart items on the `cart.html` page.
     - Handling quantity adjustments and item removal in the cart.

## 7. How is the backend server set up?
   - The backend server is set up using Node.js and Express.
   - The server handles API requests to interact with the SQLite database.
   - It includes routes to get all products and add new products to the database.

## 8. Can you explain the database schema used in this project?
   - The database schema includes a single table named `products` with the following columns:
     - `name`: The name of the product (TEXT).
     - `price`: The price of the product (TEXT).
     - `img`: The image URL of the product (TEXT).

## 9. How do you run this project locally?
   - Clone the repository:
     ```bash
     git clone https://github.com/your-username/logforauto.git
     cd logforauto
     ```
   - Install Node.js dependencies:
     ```bash
     npm install
     ```
   - Run the Node.js server:
     ```javascript
     const express = require('express');
     const bodyParser = require('body-parser');
     const sqlite3 = require('sqlite3').verbose();

     const app = express();
     const db = new sqlite3.Database(':memory:');

     app.use(bodyParser.json());

     db.serialize(() => {
         db.run("CREATE TABLE products (name TEXT, price TEXT, img TEXT)");
     });

     app.get('/api/products', (req, res) => {
         db.all("SELECT * FROM products", [], (err, rows) => {
             if (err) {
                 throw err;
             }
             res.json(rows);
         });
     });

     app.post('/api/products', (req, res) => {
         const { name, price, img } = req.body;
         db.run(`INSERT INTO products (name, price, img) VALUES (?, ?, ?)`, [name, price, img], function(err) {
             if (err) {
                 return console.log(err.message);
             }
             res.json({ id: this.lastID });
         });
     });

     app.listen(3000, () => {
         console.log('Node.js server running on port 3000');
     });
     ```
   - Access the website at `http://127.0.0.1:3000`.

## 10. Who is the creator of this project?
   - The project was created by Ajay Kumar Gupta, an MCA 2nd Year Student at Maharana Pratap Engineering College.

## 11. What references were used in this project?
   - [Bootstrap](https://getbootstrap.com/)
   - [MDB UI Kit](https://mdbootstrap.com/)
   - [Font Awesome](https://fontawesome.com/)